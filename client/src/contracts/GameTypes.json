{
  "contractName": "GameTypes",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ATTESTATION\":{\"details\":\"The game will use a `IDisputeGame` implementation that utilizes attestation proofs.\"},\"FAULT\":{\"details\":\"The game will use a `IDisputeGame` implementation that utilizes fault proofs.\"},\"VALIDITY\":{\"details\":\"The game will use a `IDisputeGame` implementation that utilizes validity proofs.\"}},\"title\":\"GameTypes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library that defines the IDs of games that can be played.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@eth-optimism/contracts-bedrock/src/libraries/DisputeTypes.sol\":\"GameTypes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@eth-optimism/contracts-bedrock/src/dispute/lib/LibClock.sol\":{\"keccak256\":\"0xa5e0ab5658506760ac26d6b73755af9c03e43184dee996e40113dbaa71199551\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1305bffdb301d190ce749d67274f6caac24002846e506f28d950f8cbc230e8c0\",\"dweb:/ipfs/QmdG6DAX2nznmwyp4VmTNxHy7orx6sdGzUKwgJ9kB69Epm\"]},\"@eth-optimism/contracts-bedrock/src/dispute/lib/LibHashing.sol\":{\"keccak256\":\"0xc0174b32e6585e7192d385b405c3825528150f9fc941a4f14448edaa662e042c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cae57fb5cb98d7b4b96cd60779920122e800d0d7db9415f16808e19175e45f89\",\"dweb:/ipfs/QmRZfqzW7Aa5FtfL5d16UdjD53q95w1VeVDkeGsnTJusrE\"]},\"@eth-optimism/contracts-bedrock/src/dispute/lib/LibPosition.sol\":{\"keccak256\":\"0x1836d08aaf755a6afea8a4d6bc92b8b96061c7df681a7308a536114ec3cd9276\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cd7a4e1cfdf656f32f5959e78a79872be90c9d5f089f1b0c56595b929d030ecc\",\"dweb:/ipfs/QmZsLmahruxKVRxpMXbnqeVonLwcaiuqHEXK1dXfx2YCZk\"]},\"@eth-optimism/contracts-bedrock/src/libraries/DisputeTypes.sol\":{\"keccak256\":\"0x11ba4465bbe25641801a34aef36fc6fd754afcf8811f1a5c2275d1a3f4567a9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eeb9fb8f3e78ca4a02952a15b8163d298298c315bf61ade3e3198068c25351b9\",\"dweb:/ipfs/QmRBBtVzEXY66UcSjonGiP1RZ32KmugDjgXexu5sswe7sh\"]}},\"version\":1}",
  "bytecode": "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204ae8753b642ff208617a47c8b7c91c176fffbd9cf61d857c855fe73a85b24e7264736f6c634300080f0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204ae8753b642ff208617a47c8b7c91c176fffbd9cf61d857c855fe73a85b24e7264736f6c634300080f0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "3072:485:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "3072:485:16:-:0;;;;;;;;",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport { LibHashing } from \"../dispute/lib/LibHashing.sol\";\nimport { LibPosition } from \"../dispute/lib/LibPosition.sol\";\nimport { LibClock } from \"../dispute/lib/LibClock.sol\";\n\nusing LibHashing for Claim global;\nusing LibPosition for Position global;\nusing LibClock for Clock global;\n\n/// @notice A custom type for a generic hash.\ntype Hash is bytes32;\n\n/// @notice A claim represents an MPT root representing the state of the fault proof program.\ntype Claim is bytes32;\n\n/// @notice A claim hash represents a hash of a claim and a position within the game tree.\n/// @dev Keccak hash of abi.encodePacked(Claim, Position);\ntype ClaimHash is bytes32;\n\n/// @notice A bondamount represents the amount of collateral that a user has locked up in a claim.\ntype BondAmount is uint256;\n\n/// @notice A dedicated timestamp type.\ntype Timestamp is uint64;\n\n/// @notice A dedicated duration type.\n/// @dev Unit: seconds\ntype Duration is uint64;\n\n/// @notice A `GameId` represents a packed 12 byte timestamp and a 20 byte address.\n/// @dev The packed layout of this type is as follows:\n/// ┌────────────┬────────────────┐\n/// │    Bits    │     Value      │\n/// ├────────────┼────────────────┤\n/// │ [0, 96)    │ Timestamp      │\n/// │ [96, 256)  │ Address        │\n/// └────────────┴────────────────┘\ntype GameId is bytes32;\n\n/// @notice A `Clock` represents a packed `Duration` and `Timestamp`\n/// @dev The packed layout of this type is as follows:\n/// ┌────────────┬────────────────┐\n/// │    Bits    │     Value      │\n/// ├────────────┼────────────────┤\n/// │ [0, 64)    │ Duration       │\n/// │ [64, 128)  │ Timestamp      │\n/// └────────────┴────────────────┘\ntype Clock is uint128;\n\n/// @notice A `Position` represents a position of a claim within the game tree.\n/// @dev This is represented as a \"generalized index\" where the high-order bit\n/// is the level in the tree and the remaining bits is a unique bit pattern, allowing\n/// a unique identifier for each node in the tree. Mathematically, it is calculated\n/// as 2^{depth} + indexAtDepth.\ntype Position is uint128;\n\n/// @notice A `GameType` represents the type of game being played.\ntype GameType is uint8;\n\n/// @notice The current status of the dispute game.\nenum GameStatus {\n    // The game is currently in progress, and has not been resolved.\n    IN_PROGRESS,\n    // The game has concluded, and the `rootClaim` was challenged successfully.\n    CHALLENGER_WINS,\n    // The game has concluded, and the `rootClaim` could not be contested.\n    DEFENDER_WINS\n}\n\n/// @title GameTypes\n/// @notice A library that defines the IDs of games that can be played.\nlibrary GameTypes {\n    /// @dev The game will use a `IDisputeGame` implementation that utilizes fault proofs.\n    GameType internal constant FAULT = GameType.wrap(0);\n\n    /// @dev The game will use a `IDisputeGame` implementation that utilizes validity proofs.\n    GameType internal constant VALIDITY = GameType.wrap(1);\n\n    /// @dev The game will use a `IDisputeGame` implementation that utilizes attestation proofs.\n    GameType internal constant ATTESTATION = GameType.wrap(2);\n}\n",
  "sourcePath": "@eth-optimism/contracts-bedrock/src/libraries/DisputeTypes.sol",
  "ast": {
    "absolutePath": "@eth-optimism/contracts-bedrock/src/libraries/DisputeTypes.sol",
    "exportedSymbols": {
      "BondAmount": [
        3500
      ],
      "Claim": [
        3496
      ],
      "ClaimHash": [
        3498
      ],
      "Clock": [
        3508
      ],
      "Duration": [
        3504
      ],
      "GameId": [
        3506
      ],
      "GameStatus": [
        3516
      ],
      "GameType": [
        3512
      ],
      "GameTypes": [
        3542
      ],
      "Hash": [
        3494
      ],
      "LibClock": [
        3084
      ],
      "LibHashing": [
        3104
      ],
      "LibPosition": [
        3262
      ],
      "Position": [
        3510
      ],
      "Timestamp": [
        3502
      ]
    },
    "id": 3543,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3474,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".15"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:16"
      },
      {
        "absolutePath": "@eth-optimism/contracts-bedrock/src/dispute/lib/LibHashing.sol",
        "file": "../dispute/lib/LibHashing.sol",
        "id": 3476,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3543,
        "sourceUnit": 3105,
        "src": "58:59:16",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3475,
              "name": "LibHashing",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3104,
              "src": "67:10:16",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "@eth-optimism/contracts-bedrock/src/dispute/lib/LibPosition.sol",
        "file": "../dispute/lib/LibPosition.sol",
        "id": 3478,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3543,
        "sourceUnit": 3263,
        "src": "118:61:16",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3477,
              "name": "LibPosition",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3262,
              "src": "127:11:16",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "@eth-optimism/contracts-bedrock/src/dispute/lib/LibClock.sol",
        "file": "../dispute/lib/LibClock.sol",
        "id": 3480,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3543,
        "sourceUnit": 3085,
        "src": "180:55:16",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3479,
              "name": "LibClock",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3084,
              "src": "189:8:16",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "global": true,
        "id": 3484,
        "libraryName": {
          "id": 3481,
          "name": "LibHashing",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 3104,
          "src": "243:10:16"
        },
        "nodeType": "UsingForDirective",
        "src": "237:34:16",
        "typeName": {
          "id": 3483,
          "nodeType": "UserDefinedTypeName",
          "pathNode": {
            "id": 3482,
            "name": "Claim",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 3496,
            "src": "258:5:16"
          },
          "referencedDeclaration": 3496,
          "src": "258:5:16",
          "typeDescriptions": {
            "typeIdentifier": "t_userDefinedValueType$_Claim_$3496",
            "typeString": "Claim"
          }
        }
      },
      {
        "global": true,
        "id": 3488,
        "libraryName": {
          "id": 3485,
          "name": "LibPosition",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 3262,
          "src": "278:11:16"
        },
        "nodeType": "UsingForDirective",
        "src": "272:38:16",
        "typeName": {
          "id": 3487,
          "nodeType": "UserDefinedTypeName",
          "pathNode": {
            "id": 3486,
            "name": "Position",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 3510,
            "src": "294:8:16"
          },
          "referencedDeclaration": 3510,
          "src": "294:8:16",
          "typeDescriptions": {
            "typeIdentifier": "t_userDefinedValueType$_Position_$3510",
            "typeString": "Position"
          }
        }
      },
      {
        "global": true,
        "id": 3492,
        "libraryName": {
          "id": 3489,
          "name": "LibClock",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 3084,
          "src": "317:8:16"
        },
        "nodeType": "UsingForDirective",
        "src": "311:32:16",
        "typeName": {
          "id": 3491,
          "nodeType": "UserDefinedTypeName",
          "pathNode": {
            "id": 3490,
            "name": "Clock",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 3508,
            "src": "330:5:16"
          },
          "referencedDeclaration": 3508,
          "src": "330:5:16",
          "typeDescriptions": {
            "typeIdentifier": "t_userDefinedValueType$_Clock_$3508",
            "typeString": "Clock"
          }
        }
      },
      {
        "canonicalName": "Hash",
        "id": 3494,
        "name": "Hash",
        "nameLocation": "396:4:16",
        "nodeType": "UserDefinedValueTypeDefinition",
        "src": "391:21:16",
        "underlyingType": {
          "id": 3493,
          "name": "bytes32",
          "nodeType": "ElementaryTypeName",
          "src": "404:7:16",
          "typeDescriptions": {
            "typeIdentifier": "t_bytes32",
            "typeString": "bytes32"
          }
        }
      },
      {
        "canonicalName": "Claim",
        "id": 3496,
        "name": "Claim",
        "nameLocation": "513:5:16",
        "nodeType": "UserDefinedValueTypeDefinition",
        "src": "508:22:16",
        "underlyingType": {
          "id": 3495,
          "name": "bytes32",
          "nodeType": "ElementaryTypeName",
          "src": "522:7:16",
          "typeDescriptions": {
            "typeIdentifier": "t_bytes32",
            "typeString": "bytes32"
          }
        }
      },
      {
        "canonicalName": "ClaimHash",
        "id": 3498,
        "name": "ClaimHash",
        "nameLocation": "687:9:16",
        "nodeType": "UserDefinedValueTypeDefinition",
        "src": "682:26:16",
        "underlyingType": {
          "id": 3497,
          "name": "bytes32",
          "nodeType": "ElementaryTypeName",
          "src": "700:7:16",
          "typeDescriptions": {
            "typeIdentifier": "t_bytes32",
            "typeString": "bytes32"
          }
        }
      },
      {
        "canonicalName": "BondAmount",
        "id": 3500,
        "name": "BondAmount",
        "nameLocation": "814:10:16",
        "nodeType": "UserDefinedValueTypeDefinition",
        "src": "809:27:16",
        "underlyingType": {
          "id": 3499,
          "name": "uint256",
          "nodeType": "ElementaryTypeName",
          "src": "828:7:16",
          "typeDescriptions": {
            "typeIdentifier": "t_uint256",
            "typeString": "uint256"
          }
        }
      },
      {
        "canonicalName": "Timestamp",
        "id": 3502,
        "name": "Timestamp",
        "nameLocation": "883:9:16",
        "nodeType": "UserDefinedValueTypeDefinition",
        "src": "878:25:16",
        "underlyingType": {
          "id": 3501,
          "name": "uint64",
          "nodeType": "ElementaryTypeName",
          "src": "896:6:16",
          "typeDescriptions": {
            "typeIdentifier": "t_uint64",
            "typeString": "uint64"
          }
        }
      },
      {
        "canonicalName": "Duration",
        "id": 3504,
        "name": "Duration",
        "nameLocation": "972:8:16",
        "nodeType": "UserDefinedValueTypeDefinition",
        "src": "967:24:16",
        "underlyingType": {
          "id": 3503,
          "name": "uint64",
          "nodeType": "ElementaryTypeName",
          "src": "984:6:16",
          "typeDescriptions": {
            "typeIdentifier": "t_uint64",
            "typeString": "uint64"
          }
        }
      },
      {
        "canonicalName": "GameId",
        "id": 3506,
        "name": "GameId",
        "nameLocation": "1557:6:16",
        "nodeType": "UserDefinedValueTypeDefinition",
        "src": "1552:23:16",
        "underlyingType": {
          "id": 3505,
          "name": "bytes32",
          "nodeType": "ElementaryTypeName",
          "src": "1567:7:16",
          "typeDescriptions": {
            "typeIdentifier": "t_bytes32",
            "typeString": "bytes32"
          }
        }
      },
      {
        "canonicalName": "Clock",
        "id": 3508,
        "name": "Clock",
        "nameLocation": "2126:5:16",
        "nodeType": "UserDefinedValueTypeDefinition",
        "src": "2121:22:16",
        "underlyingType": {
          "id": 3507,
          "name": "uint128",
          "nodeType": "ElementaryTypeName",
          "src": "2135:7:16",
          "typeDescriptions": {
            "typeIdentifier": "t_uint128",
            "typeString": "uint128"
          }
        }
      },
      {
        "canonicalName": "Position",
        "id": 3510,
        "name": "Position",
        "nameLocation": "2512:8:16",
        "nodeType": "UserDefinedValueTypeDefinition",
        "src": "2507:25:16",
        "underlyingType": {
          "id": 3509,
          "name": "uint128",
          "nodeType": "ElementaryTypeName",
          "src": "2524:7:16",
          "typeDescriptions": {
            "typeIdentifier": "t_uint128",
            "typeString": "uint128"
          }
        }
      },
      {
        "canonicalName": "GameType",
        "id": 3512,
        "name": "GameType",
        "nameLocation": "2606:8:16",
        "nodeType": "UserDefinedValueTypeDefinition",
        "src": "2601:23:16",
        "underlyingType": {
          "id": 3511,
          "name": "uint8",
          "nodeType": "ElementaryTypeName",
          "src": "2618:5:16",
          "typeDescriptions": {
            "typeIdentifier": "t_uint8",
            "typeString": "uint8"
          }
        }
      },
      {
        "canonicalName": "GameStatus",
        "id": 3516,
        "members": [
          {
            "id": 3513,
            "name": "IN_PROGRESS",
            "nameLocation": "2769:11:16",
            "nodeType": "EnumValue",
            "src": "2769:11:16"
          },
          {
            "id": 3514,
            "name": "CHALLENGER_WINS",
            "nameLocation": "2866:15:16",
            "nodeType": "EnumValue",
            "src": "2866:15:16"
          },
          {
            "id": 3515,
            "name": "DEFENDER_WINS",
            "nameLocation": "2962:13:16",
            "nodeType": "EnumValue",
            "src": "2962:13:16"
          }
        ],
        "name": "GameStatus",
        "nameLocation": "2683:10:16",
        "nodeType": "EnumDefinition",
        "src": "2678:299:16"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "GameTypes",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 3517,
          "nodeType": "StructuredDocumentation",
          "src": "2979:93:16",
          "text": "@title GameTypes\n @notice A library that defines the IDs of games that can be played."
        },
        "fullyImplemented": true,
        "id": 3542,
        "linearizedBaseContracts": [
          3542
        ],
        "name": "GameTypes",
        "nameLocation": "3080:9:16",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "documentation": {
              "id": 3518,
              "nodeType": "StructuredDocumentation",
              "src": "3096:86:16",
              "text": "@dev The game will use a `IDisputeGame` implementation that utilizes fault proofs."
            },
            "id": 3525,
            "mutability": "constant",
            "name": "FAULT",
            "nameLocation": "3214:5:16",
            "nodeType": "VariableDeclaration",
            "scope": 3542,
            "src": "3187:51:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_userDefinedValueType$_GameType_$3512",
              "typeString": "GameType"
            },
            "typeName": {
              "id": 3520,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 3519,
                "name": "GameType",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3512,
                "src": "3187:8:16"
              },
              "referencedDeclaration": 3512,
              "src": "3187:8:16",
              "typeDescriptions": {
                "typeIdentifier": "t_userDefinedValueType$_GameType_$3512",
                "typeString": "GameType"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "30",
                  "id": 3523,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "3236:1:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }
                ],
                "expression": {
                  "id": 3521,
                  "name": "GameType",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3512,
                  "src": "3222:8:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_userDefinedValueType$_GameType_$3512_$",
                    "typeString": "type(GameType)"
                  }
                },
                "id": 3522,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "memberName": "wrap",
                "nodeType": "MemberAccess",
                "src": "3222:13:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_wrap_pure$_t_uint8_$returns$_t_userDefinedValueType$_GameType_$3512_$",
                  "typeString": "function (uint8) pure returns (GameType)"
                }
              },
              "id": 3524,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "3222:16:16",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_userDefinedValueType$_GameType_$3512",
                "typeString": "GameType"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "documentation": {
              "id": 3526,
              "nodeType": "StructuredDocumentation",
              "src": "3245:89:16",
              "text": "@dev The game will use a `IDisputeGame` implementation that utilizes validity proofs."
            },
            "id": 3533,
            "mutability": "constant",
            "name": "VALIDITY",
            "nameLocation": "3366:8:16",
            "nodeType": "VariableDeclaration",
            "scope": 3542,
            "src": "3339:54:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_userDefinedValueType$_GameType_$3512",
              "typeString": "GameType"
            },
            "typeName": {
              "id": 3528,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 3527,
                "name": "GameType",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3512,
                "src": "3339:8:16"
              },
              "referencedDeclaration": 3512,
              "src": "3339:8:16",
              "typeDescriptions": {
                "typeIdentifier": "t_userDefinedValueType$_GameType_$3512",
                "typeString": "GameType"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "31",
                  "id": 3531,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "3391:1:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1_by_1",
                    "typeString": "int_const 1"
                  },
                  "value": "1"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_rational_1_by_1",
                    "typeString": "int_const 1"
                  }
                ],
                "expression": {
                  "id": 3529,
                  "name": "GameType",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3512,
                  "src": "3377:8:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_userDefinedValueType$_GameType_$3512_$",
                    "typeString": "type(GameType)"
                  }
                },
                "id": 3530,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "memberName": "wrap",
                "nodeType": "MemberAccess",
                "src": "3377:13:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_wrap_pure$_t_uint8_$returns$_t_userDefinedValueType$_GameType_$3512_$",
                  "typeString": "function (uint8) pure returns (GameType)"
                }
              },
              "id": 3532,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "3377:16:16",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_userDefinedValueType$_GameType_$3512",
                "typeString": "GameType"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "documentation": {
              "id": 3534,
              "nodeType": "StructuredDocumentation",
              "src": "3400:92:16",
              "text": "@dev The game will use a `IDisputeGame` implementation that utilizes attestation proofs."
            },
            "id": 3541,
            "mutability": "constant",
            "name": "ATTESTATION",
            "nameLocation": "3524:11:16",
            "nodeType": "VariableDeclaration",
            "scope": 3542,
            "src": "3497:57:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_userDefinedValueType$_GameType_$3512",
              "typeString": "GameType"
            },
            "typeName": {
              "id": 3536,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 3535,
                "name": "GameType",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3512,
                "src": "3497:8:16"
              },
              "referencedDeclaration": 3512,
              "src": "3497:8:16",
              "typeDescriptions": {
                "typeIdentifier": "t_userDefinedValueType$_GameType_$3512",
                "typeString": "GameType"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "32",
                  "id": 3539,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "3552:1:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_2_by_1",
                    "typeString": "int_const 2"
                  },
                  "value": "2"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_rational_2_by_1",
                    "typeString": "int_const 2"
                  }
                ],
                "expression": {
                  "id": 3537,
                  "name": "GameType",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3512,
                  "src": "3538:8:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_userDefinedValueType$_GameType_$3512_$",
                    "typeString": "type(GameType)"
                  }
                },
                "id": 3538,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "memberName": "wrap",
                "nodeType": "MemberAccess",
                "src": "3538:13:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_wrap_pure$_t_uint8_$returns$_t_userDefinedValueType$_GameType_$3512_$",
                  "typeString": "function (uint8) pure returns (GameType)"
                }
              },
              "id": 3540,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "3538:16:16",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_userDefinedValueType$_GameType_$3512",
                "typeString": "GameType"
              }
            },
            "visibility": "internal"
          }
        ],
        "scope": 3543,
        "src": "3072:485:16",
        "usedErrors": []
      }
    ],
    "src": "32:3526:16"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.15+commit.e14f2714.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.14",
  "updatedAt": "2023-08-12T03:58:53.032Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "ATTESTATION": {
        "details": "The game will use a `IDisputeGame` implementation that utilizes attestation proofs."
      },
      "FAULT": {
        "details": "The game will use a `IDisputeGame` implementation that utilizes fault proofs."
      },
      "VALIDITY": {
        "details": "The game will use a `IDisputeGame` implementation that utilizes validity proofs."
      }
    },
    "title": "GameTypes",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A library that defines the IDs of games that can be played.",
    "version": 1
  }
}